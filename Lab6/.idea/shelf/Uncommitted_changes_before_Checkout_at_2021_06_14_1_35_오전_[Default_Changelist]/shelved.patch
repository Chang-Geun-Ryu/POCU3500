Index: src/academy/pocu/comp3500/lab6/app/Program.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package academy.pocu.comp3500.lab6.app;\r\n\r\nimport academy.pocu.comp3500.lab6.League;\r\nimport academy.pocu.comp3500.lab6.leagueofpocu.Player;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Stack;\r\n\r\npublic class Program {\r\n\r\n    public static void main(String[] args) {\r\n//        {\r\n        // write your code here\r\n        Player player111111 = new Player(1, \"player1\", 9);\r\n        HashMap<Integer, Player> hashMap = new HashMap<>();\r\n        hashMap.put(player111111.getId(), player111111);\r\n\r\n        Player p = hashMap.remove(player111111.getId());\r\n\r\n        Player[] players = new Player[1000];\r\n\r\n        for (int i = 10; i < players.length ; ++i) {\r\n            players[i] = new Player(i, String.format(\"p %d\", i), i * 2);\r\n        }\r\n\r\n        for (int i = 0; i < 10 ; ++i) {\r\n            players[i] = new Player(i, String.format(\"p %d\", i), 5);\r\n        }\r\n        League leagueTest = new League(players, true);\r\n\r\n        {\r\n            Player[] a = leagueTest.getBottom(5);\r\n\r\n            for (int i = 0; i < a.length; ++i) {\r\n                System.out.println(a[i].toString());\r\n            }\r\n        }\r\n\r\n//        Player player3Match1 = leagueTest.findMatchOrNull(players[555]);\r\n//        }\r\n        {\r\n            Player player1 = new Player(1, \"player1\", 9);\r\n            Player player2 = new Player(2, \"player2\", 10);\r\n            Player player3 = new Player(3, \"player3\", 14);\r\n            Player player4 = new Player(4, \"player4\", 14);\r\n            Player player5 = new Player(5, \"player5\", 14);\r\n            Player player6 = new Player(6, \"player6\", 14);\r\n            Player player7 = new Player(7, \"player7\", 15);\r\n            Player player8 = new Player(8, \"player8\", 16);\r\n            Player player9 = new Player(9, \"player9\", 16);\r\n            Player player10 = new Player(10, \"player10\", 20);\r\n            Player player101 = new Player(10000, \"player10\", 20);\r\n//            Player[] players = new Player[100000];\r\n//\r\n//            for (int i = 0; i < players.length; ++i) {\r\n//                players[i] = new Player(i, String.format(\"p %d\", i), i * 2);\r\n//            }\r\n//            League league = new League(players, true);\r\n//\r\n//            Player player3Match = league.findMatchOrNull(player101);\r\n\r\n            League league1 = new League(new Player[]{player1, player2, player3, player4, player5, player6, player7, player8, player9, player10}, true);\r\n            League league2 = new League(new Player[]{player4, player1, player3, player2}, false);\r\n            League league11 = new League(new Player[]{player4}, false);\r\n            Player player3Match = league11.findMatchOrNull(player4);\r\n\r\n        }\r\n        {\r\n            Player player1 = new Player(1, \"player1\", 9);\r\n            Player player2 = new Player(2, \"player2\", 10);\r\n            Player player3 = new Player(3, \"player3\", 14);\r\n            Player player4 = new Player(4, \"player4\", 14);\r\n\r\n            League league = new League(new Player[]{player1, player2, player3, player4}, true);\r\n\r\n            Player player3Match = league.findMatchOrNull(player3); // player4\r\n            Player player2Match = league.findMatchOrNull(player2); // player1\r\n\r\n            assert (player3Match.getId() == player4.getId());\r\n            assert (player2Match.getId() == player1.getId());\r\n        }\r\n        {\r\n            Player player1 = new Player(1, \"player1\", 12);\r\n            Player player2 = new Player(2, \"player2\", 17);\r\n            Player player3 = new Player(3, \"player3\", 12);\r\n            Player player4 = new Player(4, \"player4\", 18);\r\n            Player player5 = new Player(5, \"player5\", 10);\r\n\r\n            League league = new League(new Player[]{player1, player2, player3, player4, player5}, false);\r\n\r\n            Player[] topPlayers = league.getTop(3); // player4, player2, player1 or player4, player2, player3\r\n\r\n            assert (topPlayers.length == 3);\r\n\r\n            Player[] top = leagueTest.getTop(10);\r\n\r\n            assert (top.length == 10);\r\n        }\r\n\r\n        {\r\n            Player player1 = new Player(1, \"player1\", 12);\r\n            Player player2 = new Player(2, \"player2\", 17);\r\n            Player player3 = new Player(3, \"player3\", 12);\r\n            Player player4 = new Player(4, \"player4\", 18);\r\n            Player player5 = new Player(5, \"player5\", 10);\r\n\r\n            League league = new League(new Player[]{player1, player2, player3, player4, player5}, false);\r\n\r\n            Player[] bottomPlayers = league.getBottom(3); // player5, player1, player3 or player5, player3, player1\r\n\r\n            assert (bottomPlayers.length == 3);\r\n\r\n            Player[] bottom = leagueTest.getBottom(10);\r\n\r\n            assert (bottom.length == 10);\r\n        }\r\n        {\r\n            Player player1 = new Player(1, \"player1\", 12);\r\n            Player player2 = new Player(2, \"player2\", 15);\r\n\r\n            League league = new League(new Player[]{player1, player2}, true);\r\n\r\n            Player newPlayer = new Player(3, \"player3\", 13);\r\n\r\n            boolean success = league.join(newPlayer); // true\r\n            assert (success == true);\r\n            success = league.join(newPlayer); // false\r\n            assert (success == false);\r\n            success = league.join(player2); // false\r\n            assert (success == false);\r\n        }\r\n        {\r\n            League emptyLeague = new League();\r\n\r\n            Player[] emptyLeaguePlayers = emptyLeague.getTop(10);\r\n\r\n            assert (emptyLeaguePlayers.length == 0);\r\n\r\n            Player player1 = new Player(1, \"player1\", 4);\r\n            Player player2 = new Player(2, \"player2\", 6);\r\n            Player player3 = new Player(3, \"player3\", 6);\r\n            Player player4 = new Player(4, \"player4\", 7);\r\n            Player player5 = new Player(5, \"player5\", 10);\r\n            Player player6 = new Player(6, \"player6\", 12);\r\n\r\n            League league1 = new League(new Player[]{player1, player2, player3, player4, player5, player6}, true);\r\n            League league2 = new League(new Player[]{player6, player4, player1, player2, player5, player3}, false);\r\n\r\n            // findMatchOrNull()\r\n            Player match = league1.findMatchOrNull(player2);\r\n            assert (match.getId() == player3.getId());\r\n\r\n            match = league1.findMatchOrNull(player4);\r\n            assert (match.getId() == player2.getId() || match.getId() == player3.getId());\r\n\r\n            match = league1.findMatchOrNull(player5);\r\n            assert (match.getId() == player6.getId());\r\n\r\n            // getTop(), getBottom()\r\n            Player[] topPlayers = league2.getTop(3);\r\n\r\n            assert (topPlayers[0].getId() == player6.getId());\r\n            assert (topPlayers[1].getId() == player5.getId());\r\n            assert (topPlayers[2].getId() == player4.getId());\r\n\r\n            Player[] bottomPlayers = league2.getBottom(3);\r\n\r\n            assert (bottomPlayers[0].getId() == player1.getId());\r\n            assert ((bottomPlayers[1].getId() == player2.getId() && bottomPlayers[2].getId() == player3.getId())\r\n                    || (bottomPlayers[1].getId() == player3.getId() && bottomPlayers[2].getId() == player2.getId()));\r\n\r\n            // join()\r\n            boolean joinSuccess = league1.join(new Player(7, \"player7\", 9));\r\n            assert (joinSuccess);\r\n\r\n            joinSuccess = league1.join(new Player(1, \"player1\", 4));\r\n            assert (!joinSuccess);\r\n\r\n            // leave()\r\n//            boolean leaveSuccess = league1.leave(new Player(5, \"player5\", 10));\r\n//            assert (leaveSuccess);\r\n//\r\n//            leaveSuccess = league1.leave(new Player(5, \"player5\", 10));\r\n//            assert (!leaveSuccess);\r\n\r\n            boolean leaveSuccess = league1.leave(player6);\r\n            assert (leaveSuccess);\r\n            leaveSuccess = league1.leave(player5);\r\n            assert (leaveSuccess);\r\n        }\r\n\r\n        {\r\n            {\r\n                Player player001 = new Player(1, \"player1\", 4);\r\n                Player player002 = new Player(2, \"player2\", 4);\r\n                Player player003 = new Player(3, \"player3\", 5);\r\n                Player player004 = new Player(4, \"player4\", 6);\r\n                Player player005 = new Player(5, \"player5\", 6);\r\n                Player player006 = new Player(6, \"player6\", 5);\r\n                League league01 = new League(new Player[]{\r\n                        player001, player002, player003, player004, player005,\r\n                        player006\r\n                }, false);\r\n                Player m = league01.findMatchOrNull(player006);\r\n                assert (m.getId() == player003.getId());\r\n            }\r\n        }\r\n\r\n        {\r\n            {\r\n                Player player1 = new Player(1, \"player1\", 10);\r\n                Player player2 = new Player(2, \"player2\", 7);\r\n                Player player3 = new Player(3, \"player3\", 9);\r\n                Player player4 = new Player(4, \"player4\", 8);\r\n\r\n                League league1 = new League();\r\n\r\n                assert (league1.join(player1) == true);\r\n                assert (league1.join(player2) == true);\r\n                assert (league1.join(player3) == true);\r\n                assert (league1.join(player4) == true);\r\n\r\n                assert (league1.leave(player2) == true);\r\n                assert (league1.leave(player3) == true);\r\n                assert (league1.leave(player4) == true);\r\n                assert (league1.leave(player1) == true);\r\n\r\n                assert (league1.join(player1) == true);\r\n                assert (league1.join(player2) == true);\r\n                assert (league1.join(player3) == true);\r\n                assert (league1.join(player4) == true);\r\n\r\n                assert (league1.leave(player3) == true);\r\n                assert (league1.leave(player1) == true);\r\n                assert (league1.leave(player2) == true);\r\n                assert (league1.leave(player4) == true);\r\n\r\n                int n = 0;\r\n            }\r\n\r\n// leave same rating\r\n            {\r\n                Player player1 = new Player(1, \"player1\", 77);\r\n                Player player2 = new Player(2, \"player2\", 77);\r\n                Player player3 = new Player(3, \"player3\", 77);\r\n                Player player4 = new Player(4, \"player4\", 77);\r\n                Player player5 = new Player(5, \"player5\", 77);\r\n                Player player6 = new Player(6, \"player6\", 77);\r\n                League league1 = new League(new Player[]{player1, player2, player3, player4, player5, player6}, true);\r\n                League league2 = new League(new Player[]{player1, player2, player3, player4, player5, player6}, false);\r\n                League league3 = new League(new Player[]{player6, player4, player1, player2, player5, player3}, false);\r\n\r\n                //assert (league1.leave(player1) == true);\r\n                //assert (league1.leave(player1) == false);\r\n                //assert (league1.leave(player2) == true);\r\n                //assert (league1.leave(player2) == false);\r\n                //assert (league1.leave(player3) == true);\r\n                //assert (league1.leave(player3) == false);\r\n                //assert (league1.leave(player4) == true);\r\n                //assert (league1.leave(player4) == false);\r\n                assert (league1.leave(player5) == true);\r\n                assert (league1.leave(player5) == false);\r\n                assert (league1.leave(player6) == true);\r\n                assert (league1.leave(player6) == false);\r\n\r\n                assert (league2.leave(player1) == true);\r\n                assert (league2.leave(player1) == false);\r\n                assert (league2.leave(player2) == true);\r\n                assert (league2.leave(player2) == false);\r\n                assert (league2.leave(player3) == true);\r\n                assert (league2.leave(player3) == false);\r\n                assert (league2.leave(player4) == true);\r\n                assert (league2.leave(player4) == false);\r\n                assert (league2.leave(player5) == true);\r\n                assert (league2.leave(player5) == false);\r\n                assert (league2.leave(player6) == true);\r\n                assert (league2.leave(player6) == false);\r\n\r\n                assert (league3.leave(player1) == true);\r\n                assert (league3.leave(player1) == false);\r\n                assert (league3.leave(player2) == true);\r\n                assert (league3.leave(player2) == false);\r\n                assert (league3.leave(player3) == true);\r\n                assert (league3.leave(player3) == false);\r\n                assert (league3.leave(player4) == true);\r\n                assert (league3.leave(player4) == false);\r\n                assert (league3.leave(player5) == true);\r\n                assert (league3.leave(player5) == false);\r\n                assert (league3.leave(player6) == true);\r\n                assert (league3.leave(player6) == false);\r\n            }\r\n        }\r\n\r\n        {\r\n            {\r\n                Player player100 = new Player(100, \"player100\", 6);\r\n                Player player101 = new Player(101, \"player101\", 6);\r\n                Player player102 = new Player(102, \"player102\", 6);\r\n                Player player103 = new Player(103, \"player103\", 6);\r\n                Player player104 = new Player(104, \"player104\", 6);\r\n                League league = new League(new Player[]{\r\n                        player100, player101, player102, player103, player104\r\n                }, true);\r\n                System.out.println(\"G03\");\r\n                boolean leaveSuccess = league.leave(player100);\r\n                assert (leaveSuccess);\r\n                leaveSuccess = league.leave(player100);\r\n                assert (!leaveSuccess);\r\n                leaveSuccess = league.leave(player101);\r\n                assert (leaveSuccess);\r\n                leaveSuccess = league.leave(player101);\r\n                assert (!leaveSuccess);\r\n                leaveSuccess = league.leave(player102);\r\n                assert (leaveSuccess);\r\n                leaveSuccess = league.leave(player102);\r\n                assert (!leaveSuccess);\r\n                leaveSuccess = league.leave(player103);\r\n                assert (leaveSuccess);\r\n                leaveSuccess = league.leave(player103);\r\n                assert (!leaveSuccess);\r\n                leaveSuccess = league.leave(player104);\r\n                assert (leaveSuccess);\r\n                leaveSuccess = league.leave(player104);\r\n                assert (!leaveSuccess);\r\n                leaveSuccess = league.leave(player104);\r\n                assert (!leaveSuccess);\r\n                Player m = league.findMatchOrNull(player111111);\r\n                assert (m == null);\r\n            }\r\n            {\r\n                {\r\n                    Player player001 = new Player(1, \"player1\", 4);\r\n                    Player player002 = new Player(2, \"player2\", 4);\r\n                    Player player003 = new Player(3, \"player3\", 5);\r\n                    Player player004 = new Player(4, \"player4\", 6);\r\n                    Player player005 = new Player(5, \"player5\", 6);\r\n                    Player player006 = new Player(6, \"player6\", 5);\r\n                    League league01 = new League(new Player[]{\r\n                            player001, player002, player003, player004, player005,\r\n                            player006\r\n                    }, false);\r\n                    assert (league01.leave(player006));\r\n                    assert (!league01.join(player003));\r\n                    assert (!league01.leave(player006));\r\n                    Player m = league01.findMatchOrNull(player003);\r\n                    assert (m != null && (m.getId() == player004.getId() || m.getId() == player005.getId()));\r\n                }\r\n                {\r\n                    Player player001 = new Player(1, \"player1\", 4);\r\n                    Player player002 = new Player(2, \"player2\", 4);\r\n                    Player player003 = new Player(3, \"player3\", 5);\r\n                    Player player004 = new Player(4, \"player4\", 6);\r\n                    Player player005 = new Player(5, \"player5\", 6);\r\n                    Player player006 = new Player(6, \"player6\", 5);\r\n                    League league01 = new League(new Player[]{\r\n                            player001, player002, player003, player004, player005,\r\n                            player006\r\n                    }, false);\r\n                    assert (league01.leave(player003));\r\n                    assert (!league01.join(player006));\r\n                    assert (!league01.leave(player003));\r\n                    Player m = league01.findMatchOrNull(player006);\r\n                    assert (m != null && (m.getId() == player004.getId() || m.getId() == player005.getId()));\r\n                }\r\n                {\r\n                    Player player001 = new Player(1, \"player1\", 4);\r\n                    Player player002 = new Player(2, \"player2\", 4);\r\n                    Player player003 = new Player(3, \"player3\", 5);\r\n                    Player player004 = new Player(4, \"player4\", 6);\r\n                    Player player005 = new Player(5, \"player5\", 6);\r\n                    Player player006 = new Player(6, \"player6\", 5);\r\n                    League league01 = new League(new Player[]{\r\n                            player001, player002, player003, player004, player005,\r\n                            player006\r\n                    }, false);\r\n                    assert (league01.leave(player001)); assert (!league01.leave(player001));\r\n                    Player m = league01.findMatchOrNull(player002);\r\n                    assert (m != null && (m.getId() == player003.getId() || m.getId() == player006.getId()));\r\n                    assert (league01.leave(player004)); assert (!league01.leave(player004));\r\n                    m = league01.findMatchOrNull(player005);\r\n                    assert (m != null && (m.getId() == player003.getId() || m.getId() == player006.getId()));\r\n                    assert (league01.leave(player003)); assert (!league01.leave(player003));\r\n                    m = league01.findMatchOrNull(player006);\r\n                    assert (m != null && (m.getId() == player005.getId()) || m.getId() == player006.getId());\r\n                    assert (league01.leave(player002)); assert (!league01.leave(player002));\r\n                    m = league01.findMatchOrNull(player005);\r\n                    assert (m != null && (m.getId() == player006.getId()));\r\n                    assert (league01.leave(player005)); assert (!league01.leave(player005));\r\n                    m = league01.findMatchOrNull(player006);\r\n                    assert (m == null);\r\n                }\r\n                {\r\n                    Player player001 = new Player(1, \"player1\", 4); //\r\n                    Player player002 = new Player(2, \"player2\", 4); //\r\n                    Player player003 = new Player(3, \"player3\", 5);\r\n                    Player player004 = new Player(4, \"player4\", 6); //\r\n                    Player player005 = new Player(5, \"player5\", 6); //\r\n                    Player player006 = new Player(6, \"player6\", 5);\r\n                    League league01 = new League(new Player[]{\r\n                            player001, player002, player003, player004, player005,\r\n                            player006\r\n                    }, false);\r\n                    assert (league01.leave(player004)); assert (!league01.leave(player004));\r\n                    Player m = league01.findMatchOrNull(player005);\r\n                    assert (m != null && (m.getId() == player003.getId() || m.getId() == player006.getId()));\r\n                    assert (league01.leave(player001)); assert (!league01.leave(player001));\r\n                    m = league01.findMatchOrNull(player003);\r\n                    assert (m != null && (m.getId() == player006.getId()));\r\n                    assert (league01.leave(player005)); assert (!league01.leave(player005));\r\n                    m = league01.findMatchOrNull(player003);\r\n                    assert (m != null && (m.getId() == player006.getId()));\r\n                    m = league01.findMatchOrNull(player006);\r\n                    assert (m != null && (m.getId() == player003.getId()));\r\n                    assert (league01.leave(player002)); assert (!league01.leave(player002));\r\n                    m = league01.findMatchOrNull(player003);\r\n                    assert (m != null && (m.getId() == player006.getId()));\r\n                    m = league01.findMatchOrNull(player006);\r\n                    assert (m != null && (m.getId() == player003.getId()));\r\n                    assert (league01.leave(player003)); assert (!league01.leave(player003));\r\n                    m = league01.findMatchOrNull(player006);\r\n                    assert (m == null);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/academy/pocu/comp3500/lab6/app/Program.java b/src/academy/pocu/comp3500/lab6/app/Program.java
--- a/src/academy/pocu/comp3500/lab6/app/Program.java	
+++ b/src/academy/pocu/comp3500/lab6/app/Program.java	
@@ -422,5 +422,141 @@
                 }
             }
         }
+
+        {
+            {
+                Player player1 = new Player(1, "player1", 4);
+                Player player2 = new Player(2, "player2", 5);
+                Player player3 = new Player(3, "player3", 6);
+                Player player4 = new Player(4, "player4", 6);
+                Player player5 = new Player(5, "player5", 7);
+                Player player6 = new Player(6, "player6", 7);
+                League league1 = new League(new Player[]{player1, player2, player3, player4, player5, player6}, true);
+                League league2 = new League(new Player[]{player1, player2, player3, player4, player5, player6}, false);
+                League league3 = new League(new Player[]{player6, player4, player1, player2, player5, player3}, false);
+
+                assert (league1.leave(player5));
+                assert (!league1.leave(player5));
+                assert (league1.leave(player6));
+                assert (!league1.leave(player6));
+
+                league1 = new League(new Player[]{player1, player2, player3, player4, player5, player6}, true);
+                assert (league1.leave(player2));
+                assert (!league1.leave(player2));
+
+                assert (league2.leave(player1));
+                assert (!league2.leave(player1));
+                assert (league2.leave(player2));
+                assert (!league2.leave(player2));
+                assert (league2.leave(player3));
+                assert (!league2.leave(player3));
+                assert (league2.leave(player4));
+                assert (!league2.leave(player4));
+                assert (league2.leave(player5));
+                assert (!league2.leave(player5));
+                assert (league2.leave(player6));
+                assert (!league2.leave(player6));
+
+                assert (league3.leave(player1));
+                assert (!league3.leave(player1));
+                assert (league3.leave(player2));
+                assert (!league3.leave(player2));
+                assert (league3.leave(player3));
+                assert (!league3.leave(player3));
+                assert (league3.leave(player4));
+                assert (!league3.leave(player4));
+                assert (league3.leave(player5));
+                assert (!league3.leave(player5));
+                assert (league3.leave(player6));
+                assert (!league3.leave(player6));
+            }
+            {
+                Player player1 = new Player(1, "player1", 4);
+                Player player2 = new Player(2, "player2", 5);
+                Player player3 = new Player(3, "player3", 6);
+                Player player4 = new Player(4, "player4", 6);
+                Player player5 = new Player(5, "player5", 7);
+                Player player6 = new Player(6, "player6", 7);
+
+                League league1 = new League(new Player[]{player1, player2, player3, player4, player5, player6}, true);
+
+                assert (league1.leave(player5));
+                assert (!league1.leave(player5));
+                assert (league1.leave(player6));
+                assert (!league1.leave(player6));
+
+                player1 = new Player(1, "player1", 8);
+                player2 = new Player(2, "player2", 6);
+                player3 = new Player(3, "player3", 6);
+                player4 = new Player(4, "player4", 4);
+                player5 = new Player(5, "player5", 5);
+                player6 = new Player(6, "player6", 7);
+                Player player7 = new Player(6, "player6", 3);
+
+                League league2 = new League(new Player[]{player1, player2, player3, player4, player5, player6, player7}, false);
+                assert (league2.leave(player2));
+                assert (!league2.leave(player2));
+            }
+            {
+                Player player1 = new Player(1, "player1", 12);
+                Player player2 = new Player(2, "player2", 20);
+                Player player3 = new Player(3, "player3", 15);
+                Player player4 = new Player(4, "player4", 16);
+
+                League league1 = new League(new Player[]{player1, player2, player3, player4}, false);
+
+                assert (league1.leave(player1));
+                assert (!league1.leave(player1));
+                assert (league1.leave(player4));
+                assert (!league1.leave(player4));
+                assert (league1.leave(player3));
+                assert (!league1.leave(player3));
+                assert (league1.leave(player2));
+                assert (!league1.leave(player2));
+
+                league1 = new League(new Player[]{player1, player2, player3, player4}, false);
+                assert (league1.leave(player2));
+                assert (!league1.leave(player2));
+                assert (league1.leave(player4));
+                assert (!league1.leave(player4));
+                assert (league1.leave(player3));
+                assert (!league1.leave(player3));
+                assert (league1.leave(player1));
+                assert (!league1.leave(player1));
+
+                league1 = new League(new Player[]{player1, player2, player3, player4}, false);
+                assert (league1.leave(player3));
+                assert (!league1.leave(player3));
+                assert (league1.leave(player1));
+                assert (!league1.leave(player1));
+                assert (league1.leave(player2));
+                assert (!league1.leave(player2));
+                assert (league1.leave(player4));
+                assert (!league1.leave(player4));
+
+                league1 = new League(new Player[]{player1, player2, player3, player4}, false);
+                assert (league1.leave(player4));
+                assert (!league1.leave(player4));
+                assert (league1.leave(player1));
+                assert (!league1.leave(player1));
+                assert (league1.leave(player3));
+                assert (!league1.leave(player3));
+                assert (league1.leave(player2));
+                assert (!league1.leave(player2));
+            }
+            {
+                Player p1 = new Player(1, "player1", 12);
+                Player p2 = new Player(2, "player2", 20);
+                Player p3 = new Player(3, "player3", 17);
+                Player p4 = new Player(4, "player4", 21);
+                Player p5 = new Player(4, "player4", 19);
+                Player p6 = new Player(4, "player4", 18);
+
+                League league1 = new League(new Player[]{p1, p2, p3, p4, p5, p6}, false);
+
+                assert (league1.leave(p2));
+                assert (!league1.leave(p2));
+            }
+        }
     }
 }
